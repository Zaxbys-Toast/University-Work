(defun find-len (i)
  "Calculate Collatz sequence length for integer i."
  (let ((count 0))
    (loop while (not (= i 1))
          do (progn
               (if (evenp i)
                   (setq i (/ i 2))
                   (setq i (+ (* i 3) 1)))
               (setq count (+ count 1))))
    count))

(let* ((args sb-ext:*posix-argv*)  ; Get command-line arguments
       (min-range (parse-integer (nth 1 args)))
       (max-range (parse-integer (nth 2 args))))
  (if (not (and min-range max-range))
      (princ "Range values must be integers\n")
      (progn
        (if (>= min-range max-range)
            (princ "minRange must be less than maxRange\n")
            (progn
              (let ((lengths nil)
                    (index-lengths nil))
                (loop for i from min-range to (1- max-range)
                      do (let ((len (find-len i)))
                           (when (< (length lengths) 10)
                             (push len lengths)
                             (push i index-lengths))
                           (when (and (> (length lengths) 9)
                                      (> len (min lengths)))
                             (let ((min-len (min lengths))
                                   (min-idx (position min-len lengths)))
                               (setf (nth min-idx lengths) len)
                               (setf (nth min-idx index-lengths) i))))
                (let* ((sorted-lengths-and-indexes (sort (mapcar #'list lengths index-lengths)
                                                         (lambda (a b) (> (first a) (first b)))))) 
                  (princ "Sorted based on sequence length:\n")
                  (dolist (pair sorted-lengths-and-indexes)
                    (princ (format nil "~a ~a\n" (second pair) (first pair))))
                  (let* ((sorted-by-index (sort (mapcar #'list lengths index-lengths)
                                               (lambda (a b) (> (second a) (second b)))))) 
                    (princ "\nSorted based on integer size:\n")
                    (dolist (pair sorted-by-index)
                      (princ (format nil "~a ~a\n" (second pair) (first pair)))))))))))
