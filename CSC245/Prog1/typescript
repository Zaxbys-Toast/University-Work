Script started on Mon 25 Sep 2023 09:17:20 PM EDT
]0;king_jw@cobra:~/CSC245/Prog1[?1034h[king_jw@cobra Prog1]$ cat MoveFront.cpp 
#include "dlist.h"
#include <iostream>

using namespace std;
//Set up all of the methods that are going to be used
void PrintMenu();
 
void FindandMove(DList<int>& list);

void AccessItem(DList<int>& list);

void TailInsert(DList<int>& list);

void HeadInsert(DList<int>& list);

void PrintList(const DList<int>& list);

void PrintLength(const DList<int>& list);

void Delete(DList<int>& list);
//Main----------------------------------------------------------------------------------------------------------
int main()
{
	DList<int> list;
	char sel;
	while(toupper(sel) != 'Q')
	{
		PrintMenu();
		cin >> sel;
		switch(toupper(sel))
		{
			case 'H' : HeadInsert(list); break;
			case 'T' : TailInsert(list); break;
			case 'A' : AccessItem(list); break;
			case 'D' : Delete(list); break;
			case 'P' : PrintList(list); break;
			case 'L' : PrintLength(list); break;
			case 'Q' : cout << "\tExiting Program...\n"; break;
			default : cout << "\tError. Try Again." << endl;
		}
	}
}
//Methods--------------------------------------------------------------------------------------------------------
void PrintMenu()
{
	cout << "\n|-----------------------------|" << endl;
	cout << "|------------Menu-------------|" << endl;
	cout << "|-----------------------------|" << endl;
	cout << "|                             |" << endl;
	cout << "| H: Insert item at front     |" << endl;
	cout << "| T: Insert item at back      |" << endl;
	cout << "| A: Access an item in list   |" << endl;
	cout << "| D: Delete an item in list   |" << endl;
	cout << "| P: Print the list           |" << endl;
	cout << "| L: Print the list's length  |" << endl;
	cout << "| Q: Quit the program         |" << endl;
	cout << "|                             |" << endl;
	cout << "|-----------------------------|" << endl;
	cout << "|                             |" << endl;
	cout << "|  Please enter your choice:  |\n" << endl;
	
}

void HeadInsert (DList<int>& list)
{
	int num;
	cout << "What number would you like to insert?" << endl;
	cin >> num;
	if(! list.inList(num)) //if the num isn't in the list use insertHead
	{
		list.insertHead(num);	
		cout << "Done" << endl;
	}
	else //if it is let the user know
		cout<< "Duplicate number" << endl;
}

void TailInsert (DList<int>& list)
{
	int num;
	cout<<"What number would you like to insert?" << endl;
	cin >> num;
	if(! list.inList(num)) //if the num isn't in the list already use appendTail
	{
		list.appendTail(num);
		cout<<"Done"<<endl;	
	}
	else	//if it is in the list let the user know and don't add it
	{
		cout<<"Duplicate number"<<endl;
	}
}

void AccessItem (DList<int>& list)
{
	FindandMove(list);
}

void FindandMove (DList<int>& list)
{
	int num;
	cout << "What number would you like to access?" << endl;
	cin >> num;
	if (list.inList(num))
	{
		NodeType<int>* temp = new NodeType<int>; //make a new temp node to hold the value that is getting moved
		temp -> info = num;
		list.deleteItem(num); //delete the node that is being moved 
		list.insertHead(temp -> info);	//create a new head using the temp value
		cout << "Item found and succesfully moved!" << endl; 
		delete temp;
		temp = NULL;
	}
	else
	{
		cout << "Item not found" << endl;
	}
}

void Delete (DList<int>& list)
{
	int num;
	cout << "What number would you like to delete?" << endl;
	cin >> num;
	if (list.inList(num)) //if the number is in the list delete it using the deleteItem method
	{
		list.deleteItem(num);
	}
	else //if the number isn't in the list let the user know 
	{
		cout << "This number is not in the list" << endl;
	}
}

void PrintList (const DList<int>& list)
{
	if (list.isEmpty()) //if the list is empty let the user know
	{
		cout << "The list is empty" << endl;
	}
	else //run the print method
	{
		cout << "Printing list ..." << endl;
		list.print();
	}
}

void PrintLength(const DList<int>& list) //Print out the private length variable using the lengthIs method
{
	cout << "The length of the list is " << list.lengthIs() << endl;
}



]0;king_jw@cobra:~/CSC245/Prog1[king_jw@cobra Prog1]$ cat dlist.h

using namespace std;

template <class ItemType>
struct NodeType;

template <class ItemType>
class DList 
{
public :
    DList ();		// Constructor
    ~DList   ();  	// Destructor	

    // Public Operations
    void makeEmpty (); 
    void deleteItem (ItemType item);
    bool inList (ItemType item) const;	
    bool isEmpty () const;  
    void print() const; 
    void insertHead (ItemType item); 
    void appendTail (ItemType item); 
    int lengthIs() const;

private :
    // Private Attributes of a DList Object 
    NodeType<ItemType>* head;
    int length;

    // Functions Called Solely By Public Functions, Not The Client 
    NodeType<ItemType>* location(ItemType item) const;
    NodeType<ItemType>* last() const; 
    void deleteLocation (NodeType<ItemType>* delPtr);
};

#include "dlist.cpp"
]0;king_jw@cobra:~/CSC245/Prog1[king_jw@cobra Prog1]$ cat dlist.cpp
#include <cstddef> 
#include <iostream>

using namespace std;

template<class ItemType>
struct NodeType
{
	ItemType info;
	NodeType<ItemType>*	next;
	NodeType<ItemType>*	back;
};

template <class ItemType>		
DList<ItemType>::DList()		// Class constructor
{
    length = 0;
    head = NULL;
}

template <class ItemType>
DList<ItemType>::~DList   ()		
{
	// Post: List is empty; All items have been deallocated.
	makeEmpty();
}

template <class ItemType>
void DList<ItemType>::makeEmpty()
{
    // Post: List is empty; all items have been deallocated.
	while (length < 0) //while the length isnt 0 delete the last item
	{
		deleteLocation(last());	
	}
}

template <class ItemType>
void DList<ItemType>::deleteItem (ItemType item)	
{
	//  Pre :  item to be deleted is passed in via parameter 
        // Post :  item is deleted if it exists in list 
	if(inList(item))
	{
		deleteLocation(location(item));	
	}
}

template <class ItemType>
bool DList<ItemType>::inList (ItemType item) const
{
	//  Pre :  item to be located is passed in via parameter 
        // Post :  function returns bool value if item is found 
	NodeType<ItemType>* temp = new NodeType<ItemType>;
	temp = head;
	while(temp != NULL)
	{
		if(temp->info == item)
			return true;
		temp=temp->next;
	}	
	return false;

}

template <class ItemType>
bool DList<ItemType>::isEmpty() const		
{
	// Post : function returns true if list is empty, false otherwise
	return (head == NULL);
	
}

template <class ItemType>
void DList<ItemType>::print() const	
{
	int pos = 1; //used to print the location in the list
	NodeType<ItemType>* node = new NodeType<ItemType>;
	node = head;

	while (node != NULL)
	{
		cout << pos << ":	 " <<  node->info << endl;
		pos++;
		node = node -> next; //traverse the list
	}
	node = NULL;
	delete node;
}
	
template <class ItemType>
void DList<ItemType>::insertHead(ItemType item)	
{
	//  Pre : item to be inserted is passed in via parameter
        // Post : item is inserted at head of list;  Former first node is 
        //        linked back to this new one via double link;
        //        Length incremented;  Special case handled if list is empty 
	NodeType<ItemType>* newNode = new NodeType<ItemType>;
	newNode->info = item;
	newNode->back = NULL;

        if(head == NULL)
	{
		newNode -> next = NULL;
	}
	else
	{
 		head -> back = newNode; //link the 1st item to the 2nd
		newNode -> next = head; //link the 2nd item to the 1st
	}
	head = newNode; //make newNode the new head
	length++;
}

template <class ItemType>
void DList<ItemType>::appendTail(ItemType item)
{
	//  Pre :  item to be inserted is passed in via parameter
        // Post :  item is added to tail of list; Former last node
        //         is linked to this new one via double link 
	NodeType <int>* newNode = new NodeType<int>;
	newNode -> info = item;
	newNode -> next = NULL;
	if (head == NULL)
	{
		newNode -> back = NULL; //make the newNode the new head
		head = newNode;
	}
	else
	{
		newNode -> back = last(); //link the new last item to the old last item
		newNode -> back -> next = newNode; //link the old last item to the new last item
	}
	length++;
}

template <class ItemType>
int DList<ItemType>::lengthIs() const	
{
	// Post : Function returns current length of list  
	return length;
}

template <class ItemType>
NodeType<ItemType>* DList<ItemType>::location(ItemType item) const	
{
	//  Pre : item to be located is passed in via parameter 
        // Post : function returns address of item being searched for --
        //        if not found, NULL is returned  
	if(inList(item))
	{
		NodeType<ItemType>* temp = new NodeType<ItemType>; //create a temp to traverse through the list 
		temp = head;
		while(temp -> info != item) //while the temp value is not the value being searched for traverse the list
		{
			temp = temp -> next;
		}	
		return temp; //return the temp location
	}	
	else
		return NULL;
}

template <class ItemType>
NodeType<ItemType>* DList<ItemType>::last() const	
{
	// Post : Function returns location of current last item in list
	NodeType<ItemType>* temp = head;
	if(isEmpty()) //if there is nothing in the list there is no last
	{
		return NULL;
	}
	else
	{
		while (temp -> next != NULL) // while the temp node next is not null it is not the last item in the list
		{
			temp = temp -> next; // set temp to the next node
		}	
		return temp; //return the last node
	}
}

template <class ItemType>
void DList<ItemType>::deleteLocation (NodeType<ItemType>* delPtr)	
{

	//  Pre : Item to be deleted exits in list and its location
        //        is passed in via parameter
                   
	// Post : Location passed in is removed from list;  Length
        //        is decremented, and location is deallocated 

        // Special Cases Handled for Deleting Only One Item in List,
        // The Head Item of List, and the Tail Item of List
	if(length == 1)
	{
		delete delPtr; //get rid of delPtr
		delPtr = NULL;
		head = NULL;	//Set the head to null
	}
	else if(head == delPtr) 
	{
		head = head -> next; //Make the new head the second item in the list
		head -> back = NULL; //Delete the old head
	}
	else if(last()==delPtr)
	{
		delPtr -> back -> next = NULL; //Set the second to last items next to null 
	}
	else
	{
		delPtr -> next -> back = delPtr -> back; //link the next item to the last item
		delPtr -> back -> next = delPtr -> next; //link the last item to the next item
	}
	length--;
	delPtr=NULL;
	delete delPtr;
}
]0;king_jw@cobra:~/CSC245/Prog1[king_jw@cobra Prog1]$ c++ MoveFront.cpp 
]0;king_jw@cobra:~/CSC245/Prog1[king_jw@cobra Prog1]$ ./a.out 

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

h
What number would you like to insert?
1
Done

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

h
What number would you like to insert?
2
Done

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

t
What number would you like to insert?
3
Done

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

p
Printing list ...
1:	 2

2:	 1

3:	 3


|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

l
The length of the list is 3

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

d
What number would you like to delete?
2

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

p
Printing list ...
1:	 1

2:	 3


|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

l
The length of the list is 2

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

d
What number would you like to delete?
1

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

d
What number would you like to delete?
3

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

l
The length of the list is 0

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

p
The list is empty

|-----------------------------|
|------------Menu-------------|
|-----------------------------|
|                             |
| H: Insert item at front     |
| T: Insert item at back      |
| A: Access an item in list   |
| D: Delete an item in list   |
| P: Print the list           |
| L: Print the list's length  |
| Q: Quit the program         |
|                             |
|-----------------------------|
|                             |
|  Please enter your choice:  |

q
	Exiting Program...
]0;king_jw@cobra:~/CSC245/Prog1[king_jw@cobra Prog1]$ exit
exit

Script done on Mon 25 Sep 2023 09:18:29 PM EDT
