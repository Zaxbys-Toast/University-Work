     1                                  ; Bob Allen
     2                                  ; Demo FORK
     3                                  ; Fall 2023	
     4                                  ; CSC 322
     5                                  
     6                                  SECTION .data
     7                                  ; define data/variables here.  Think DB, DW, DD, DQ
     8                                  
     9 00000000 506172656E740A00        parentMSG: db "Parent",10,0
    10                                  pLEN:	   equ $-parentMSG
    11                                  
    12 00000008 4368696C6472656E20-     childMSG:  db "Children are more fun!",10,0
    13 00000011 617265206D6F726520-
    14 0000001A 66756E210A00       
    15                                  cLEN:	   equ $-childMSG
    16                                  
    17 00000020 0100000000000000        sec:	dd 1,0	 ;; struct for sleep on second
    18                                  
    19                                  SECTION .bss
    20                                  
    21                                  SECTION .text
    22                                  global _main, _sleep1
    23                                  _main:
    24                                  
    25                                  	;;;;   FORK 2 PROCS
    26 00000000 B802000000              	mov	eax,2
    27 00000005 CD80                    	int	80h
    28                                  
    29                                  	;;;;;;;;;;;;;;;;;;;;;;  Creates two processes, same code,
    30                                  	;;;;;;;;;;;;;;;;;;;;;;   but returns zero to new proc, and the procID of child to parent
    31 00000007 83F800                  	cmp	eax,0
    32 0000000A 741D                    	je	childProc
    33                                  
    34                                  parent:
    35                                  
    36                                  	;;; print parent message
    37 0000000C B804000000              	mov	eax,4
    38 00000011 BB01000000              	mov	ebx,1
    39 00000016 B9[00000000]            	mov	ecx,parentMSG
    40 0000001B BA08000000              	mov	edx,pLEN
    41 00000020 CD80                    	int	80h
    42                                  
    43                                  	; sleep one second
    44 00000022 E830000000              	call _sleep1
    45 00000027 EBE3                    	jmp parent
    46                                  
    47                                  childProc:
    48                                  	;;; print child  message
    49 00000029 B804000000              	mov	eax,4
    50 0000002E BB01000000              	mov	ebx,1
    51 00000033 B9[08000000]            	mov	ecx,childMSG
    52 00000038 BA18000000              	mov	edx,cLEN
    53 0000003D CD80                    	int	80h
    54                                  
    55                                  	; sleep two seconds
    56 0000003F E813000000              	call _sleep1
    57 00000044 E80E000000              	call _sleep1
    58 00000049 EBDE                    	jmp childProc
    59                                  
    60                                  byebye:
    61                                  ; Normal termination code
    62 0000004B B801000000              mov eax, 1
    63 00000050 BB00000000              mov ebx, 0
    64 00000055 CD80                    int 80h
    65                                  
    66                                  _sleep1:
    67 00000057 60                              pusha
    68 00000058 B8A2000000                      mov     eax,162
    69 0000005D BB[20000000]                    mov     ebx,sec
    70 00000062 B900000000                      mov     ecx,0
    71 00000067 CD80                            int     80h
    72 00000069 61                              popa
    73 0000006A C3                              ret
    74                                  
